secteurs <- st_read("00_TYPO/mobiTypo/script/phase0/data_source/BDGEO/SEC_50ED_6EOD_W84.shp")
secteurs <- secteurs %>%
filter(PAYS=="FR" & LIB_ED!="VAlenciennes, 2011")
mod <- sort(unique(secteurs$ENQUETE))
## user
ui <- fluidPage(
h3("Carte des secteurs"),
selectInput(inputId = "enq",
label = "Choisir une enquête",
choices = mod),
leafletOutput("map")
)
## server
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = secteurs %>% filter(ENQUETE==input$enq),
popup = ~paste0("Enquête : ", LIB_ED, " secteur : ", CODE_SEC),
color = "#001051",
weight = 2)
})
}
shinyApp(ui, server)
## load data
secteurs <- st_read("00_TYPO/mobiTypo/script/phase0/data_source/BDGEO/SEC_50ED_6EOD_W84.shp")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(leaflet)
library(sf)
## load data
secteurs <- st_read("00_TYPO/mobiTypo/script/phase0/data_source/BDGEO/SEC_50ED_6EOD_W84.shp")
secteurs <- secteurs %>%
filter(PAYS=="FR" & LIB_ED!="VAlenciennes, 2011")
mod <- sort(unique(secteurs$ENQUETE))
## user
ui <- fluidPage(
h3("Carte des secteurs"),
selectInput(inputId = "enq",
label = "Choisir une enquête",
choices = mod),
leafletOutput("map")
)
## server
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = secteurs %>% filter(ENQUETE==input$enq),
popup = ~paste0("Enquête : ", LIB_ED, " secteur : ", CODE_SEC),
color = "#001051",
weight = 2)
})
}
shinyApp(ui, server)
library(dplyr)
## load data
secteurs <- st_read("00_TYPO/mobiTypo/script/phase0/data_source/BDGEO/SEC_50ED_6EOD_W84.shp")
secteurs <- secteurs %>%
filter(PAYS=="FR" & LIB_ED!="VAlenciennes, 2011")
mod <- sort(unique(secteurs$ENQUETE))
## user
ui <- fluidPage(
h3("Carte des secteurs"),
selectInput(inputId = "enq",
label = "Choisir une enquête",
choices = mod),
leafletOutput("map")
)
## server
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = secteurs %>% filter(ENQUETE==input$enq),
popup = ~paste0("Enquête : ", LIB_ED, " secteur : ", CODE_SEC),
color = "#001051",
weight = 2)
})
}
shinyApp(ui, server)
# global
knitr::opts_chunk$set(cache = TRUE)
options(scipen = 999999)
# librairies
library(sf)
library(dplyr)
library(leaflet)
# load & filter data
secteur <- st_read("data_source/BDGEO/SEC_50ED_6EOD_W84.shp")
secteur <- secteur %>%
filter(PAYS=="FR" & LIB_ED!="VAlenciennes, 2011")
perimetre <-  st_read("data_source/BDGEO/PERIMETRE_50ED_W84.shp")
perimetre <- perimetre %>%
filter(LIB_ED!="Valenciennes, 2011") %>%
select(ENQUETE)
# commune <- st_read("data_source/commune/commune21_cut.shp")
commune <- st_read("data_source/commune/commune21_intersection.shp")
# A-t-on besoin de l'échelon arrondissement ?
# arr <- read_sf("data_source/commune/ARRONDISSEMENT_MUNICIPAL.shp")
str(secteur)
str(perimetre)
str(commune)
class(st_geometry(secteur))
class(st_geometry(perimetre))
class(st_geometry(commune))
st_crs(secteur)
st_crs(perimetre)
st_crs(commune)
# les communes comprises dans plusieurs périmètres voisins sont dupliquées
doublon <- commune %>%
arrange(ENQUETE) %>%
filter(duplicated(INSEE_COM)) %>%
pull(INSEE_COM)
# Exemple d'une commune dupliquée :
commune %>%
filter(INSEE_COM %in% doublon[1]) %>%
select(NOM, ENQUETE)
# mapping with leaflet
map <- function(enq){
leaflet(width = "100%") %>%
addTiles() %>%
#setView(0.69, 47.26, zoom = 7) %>%
addPolygons(data = secteur %>% filter(ENQUETE==enq),
popup = ~paste0("Enquête : ", LIB_ED, " - secteur : ", CODE_SEC),
color = "#001051",
weight = 1,
group = "secteurs (bleu)") %>%
addPolygons(data = commune %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM),
group = "communes (rouge)") %>%
addPolygons(data = perimetre %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "green",
weight = 2,
group = "périmètre (vert)") %>%
addLayersControl(
baseGroups = "OSM",
overlayGroups = c("secteurs (bleu)", "communes (rouge)", "périmètre (vert)"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup("communes (rouge)")
}
map(enq = "TOULOUSE")
# sfc_GEOMETRY to single polygon
c <- commune %>%
filter(!st_is_empty(.)) %>%
# st_cast(., "MULTIPOLYGON") %>%
filter(st_is_valid(commune)==TRUE) %>%
st_cast(., "POLYGON")
class(st_geometry(c))
# Area of each polygon
c <- c %>%
mutate(AREA = round(st_area(.)))
# rm units
attributes(c$AREA) <- NULL
# Area distribution : a lot of micro areas
require(skimr)
# Area distribution : a lot of micro areas
require(skimr)
skim(c$AREA)
# load communes not cut
comRef <- st_read("data_source/commune/commune21.shp")
comRef <- comRef %>%
mutate(AREA = round(st_area(.)))
attributes(comRef$AREA) <- NULL
c <- c %>%
mutate(residu = case_when(AREA<min(comRef$AREA) ~ "oui",
TRUE ~ "non"))
c %>% filter(residu=="non")
enq= "TOULOUSE"
leaflet(width = "100%") %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = commune %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM),
group = "communes (rouge)") %>%
addPolygons(data = c %>% filter(ENQUETE==enq & residu=="oui"),
fillColor = "red",
fillOpacity = 1,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM, " ", AREA),
group = "résidus (rouge)") %>%
addPolygons(data = perimetre %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "green",
weight = 2,
group = "périmètre (vert)") %>%
addLayersControl(
baseGroups = "OSM - CARTO",
overlayGroups = c("communes (rouge)", "résidus (rouge)", "périmètre (vert)"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("communes (rouge)", "périmètre (vert)"))
enq= "IDF"
leaflet(width = "100%") %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = commune %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM),
group = "communes (rouge)") %>%
addPolygons(data = c %>% filter(ENQUETE==enq & residu=="oui"),
fillColor = "red",
fillOpacity = 1,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM, " ", AREA),
group = "résidus (rouge)") %>%
addPolygons(data = perimetre %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "green",
weight = 2,
group = "périmètre (vert)") %>%
addLayersControl(
baseGroups = "OSM - CARTO",
overlayGroups = c("communes (rouge)", "résidus (rouge)", "périmètre (vert)"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("communes (rouge)", "périmètre (vert)"))
View(comRef)
# global
knitr::opts_chunk$set(cache = TRUE)
options(scipen = 999999)
# librairies
library(sf)
library(dplyr)
library(leaflet)
# load & filter data
secteur <- st_read("data_source/BDGEO/SEC_50ED_6EOD_W84.shp")
secteur <- secteur %>%
filter(PAYS=="FR" & LIB_ED!="VAlenciennes, 2011")
perimetre <-  st_read("data_source/BDGEO/PERIMETRE_50ED_W84.shp")
perimetre <- perimetre %>%
filter(LIB_ED!="Valenciennes, 2011") %>%
select(ENQUETE)
# commune <- st_read("data_source/commune/commune21_cut.shp")
commune <- st_read("data_source/commune/commune21_intersection.shp")
# A-t-on besoin de l'échelon arrondissement ?
# arr <- read_sf("data_source/commune/ARRONDISSEMENT_MUNICIPAL.shp")
str(secteur)
str(perimetre)
str(commune)
class(st_geometry(secteur))
class(st_geometry(perimetre))
class(st_geometry(commune))
st_crs(secteur)
st_crs(perimetre)
st_crs(commune)
# les communes comprises dans plusieurs périmètres voisins sont dupliquées
doublon <- commune %>%
arrange(ENQUETE) %>%
filter(duplicated(INSEE_COM)) %>%
pull(INSEE_COM)
# Exemple d'une commune dupliquée :
commune %>%
filter(INSEE_COM %in% doublon[1]) %>%
select(NOM, ENQUETE)
# mapping with leaflet
map <- function(enq){
leaflet(width = "100%") %>%
addTiles() %>%
#setView(0.69, 47.26, zoom = 7) %>%
addPolygons(data = secteur %>% filter(ENQUETE==enq),
popup = ~paste0("Enquête : ", LIB_ED, " - secteur : ", CODE_SEC),
color = "#001051",
weight = 1,
group = "secteurs (bleu)") %>%
addPolygons(data = commune %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM),
group = "communes (rouge)") %>%
addPolygons(data = perimetre %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "green",
weight = 2,
group = "périmètre (vert)") %>%
addLayersControl(
baseGroups = "OSM",
overlayGroups = c("secteurs (bleu)", "communes (rouge)", "périmètre (vert)"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup("communes (rouge)")
}
map(enq = "TOULOUSE")
# geometry type ?
class(st_geometry(commune))
# polygons with no geometry ?
sum(st_is_empty(commune)==TRUE)
sum(st_is_valid(commune)==FALSE)
# sfc_GEOMETRY to single polygon
c <- commune %>%
filter(!st_is_empty(.)) %>%
# st_cast(., "MULTIPOLYGON") %>%
filter(st_is_valid(commune)==TRUE) %>%
st_cast(., "POLYGON")
# Area of each polygon
c <- c %>%
mutate(AREA = round(st_area(.)))
# rm units
attributes(c$AREA) <- NULL
# Area distribution : a lot of micro areas
require(skimr)
skim(c$AREA)
# load communes not cut
comRef <- st_read("data_source/commune/commune21.shp")
class(st_geometry(c))
class(st_geometry(comRef))
comRef <- comRef %>%
mutate(AREA = round(st_area(.)))
attributes(comRef$AREA) <- NULL
# jointure spatiale
comRef <- st_join(st_make_valid(comRef), st_make_valid(perimetre))
View(comRef)
class(st_geometry(comRef))
sum(st_is_empty(comRef)==TRUE)
sum(st_is_valid(comRef)==FALSE)
comRef <- comRef %>%
group_by(ENQUETE) %>%
mutate(AreaMin = min(AREA))
unique(AreaMin)
unique(comRef$AreaMin)
sort(unique(comRef$AreaMin))
c <- c %>%
left_join(., select(comRef, ENQUETE, AreaMin)) %>%
group_by(ENQUETE) %>%
mutate(residu = case_when(AREA < AreaMin ~ "oui",
TRUE ~ "non"))
AreaRef <- comRef %>%
group_by(ENQUETE) %>%
mutate(AreaMin = min(AREA)) %>%
ungroup() %>%
st_drop_geometry()
sort(unique(comRef$AreaMin))
sort(unique(AreaRef$AreaMin))
c <- c %>%
left_join(., select(comRef, ENQUETE, AreaMin)) %>%
group_by(ENQUETE) %>%
mutate(residu = case_when(AREA < AreaMin ~ "oui",
TRUE ~ "non"))
c <- c %>%
left_join(., select(AreaRef, ENQUETE, AreaMin)) %>%
group_by(ENQUETE) %>%
mutate(residu = case_when(AREA < AreaMin ~ "oui",
TRUE ~ "non"))
c %>% filter(residu=="non")
# sfc_GEOMETRY to single polygon
c <- commune %>%
filter(!st_is_empty(.)) %>%
# st_cast(., "MULTIPOLYGON") %>%
filter(st_is_valid(commune)==TRUE) %>%
st_cast(., "POLYGON")
# Area of each polygon
c <- c %>%
mutate(AREA = round(st_area(.)))
# rm units
attributes(c$AREA) <- NULL
# Area distribution : a lot of micro areas
require(skimr)
skim(c$AREA)
# load communes not cut
comRef <- st_read("data_source/commune/commune21.shp")
# load communes not cut
comRef <- st_read("data_source/commune/commune21.shp")
class(st_geometry(comRef))
comRef <- comRef %>%
mutate(AREA = round(st_area(.)))
comRef <- comRef %>%
mutate(AREA = round(st_area(.)))
attributes(comRef$AREA) <- NULL
# jointure spatiale
comRef <- st_join(st_make_valid(comRef), st_make_valid(perimetre))
class(st_geometry(comRef))
sum(st_is_empty(comRef)==TRUE)
sum(st_is_valid(comRef)==FALSE)
AreaRef <- comRef %>%
group_by(ENQUETE) %>%
mutate(AreaMin = min(AREA)) %>%
ungroup() %>%
st_drop_geometry()
sort(unique(AreaRef$AreaMin))
c <- c %>%
left_join(., select(AreaRef, ENQUETE, AreaMin)) %>%
group_by(ENQUETE) %>%
mutate(residu = case_when(AREA < AreaMin ~ "oui",
TRUE ~ "non")) %>%
ungroup()
AreaRef <- comRef %>%
st_drop_geometry() %>%
group_by(ENQUETE) %>%
summarise(AreaMin = min(AREA)) %>%
ungroup()
sort(unique(AreaRef$AreaMin))
c <- c %>%
left_join(., select(AreaRef, ENQUETE, AreaMin)) %>%
group_by(ENQUETE) %>%
mutate(residu = case_when(AREA < AreaMin ~ "oui",
TRUE ~ "non")) %>%
ungroup()
c %>% filter(residu=="non")
View(c)
enq= "IDF"
leaflet(width = "100%") %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = commune %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM),
group = "communes (rouge)") %>%
addPolygons(data = c %>% filter(ENQUETE==enq & residu=="oui"),
fillColor = "red",
fillOpacity = 1,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM, " ", AREA),
group = "résidus (rouge)") %>%
addPolygons(data = perimetre %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "green",
weight = 2,
group = "périmètre (vert)") %>%
addLayersControl(
baseGroups = "OSM - CARTO",
overlayGroups = c("communes (rouge)", "résidus (rouge)", "périmètre (vert)"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("communes (rouge)", "périmètre (vert)"))
cc <- c %>%
filter(residu == "non") %>%
group_by(INSEE_COM, ENQUETE) %>%
summarise(AREA = sum(AREA))
class(st_geometry(cc))
enq= "IDF"
leaflet(width = "100%") %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = cc %>% filter(ENQUETE==enq),
fillColor = "yellow",
fillOpacity = 0.5,
color = "red",
weight = 1,
popup = ~paste0(INSEE_COM),
group = "communes (rouge)") %>%
addPolygons(data = c %>% filter(ENQUETE==enq & residu=="oui"),
fillColor = "red",
fillOpacity = 1,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM, " ", AREA),
group = "résidus (rouge)") %>%
addPolygons(data = perimetre %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "green",
weight = 2,
group = "périmètre (vert)") %>%
addLayersControl(
baseGroups = "OSM - CARTO",
overlayGroups = c("communes (rouge)", "résidus (rouge)", "périmètre (vert)"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("résidus (rouge)", "périmètre (vert)"))
enq= "IDF"
leaflet(width = "100%") %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = c %>% filter(ENQUETE==enq & residu=="non"),
fillColor = "yellow",
fillOpacity = 0.5,
color = "red",
weight = 1,
popup = ~paste0(INSEE_COM),
group = "communes (rouge)") %>%
addPolygons(data = c %>% filter(ENQUETE==enq & residu=="oui"),
fillColor = "red",
fillOpacity = 1,
color = "red",
weight = 1,
popup = ~paste0(NOM, " ", INSEE_COM, " ", AREA),
group = "résidus (rouge)") %>%
addPolygons(data = perimetre %>% filter(ENQUETE==enq),
fillOpacity = 0,
color = "green",
weight = 2,
group = "périmètre (vert)") %>%
addLayersControl(
baseGroups = "OSM - CARTO",
overlayGroups = c("communes (rouge)", "résidus (rouge)", "périmètre (vert)"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("résidus (rouge)", "périmètre (vert)"))
View(comRef)
View(AreaRef)
View(c)
# sfc_GEOMETRY to single polygon
c <- commune %>%
filter(!st_is_empty(.)) %>%
# st_cast(., "MULTIPOLYGON") %>%
filter(st_is_valid(commune)==TRUE) %>%
st_cast(., "POLYGON")
unlink("00_TYPO/mobiTypo/script/phase0/BaseSecteursCommunes_cache", recursive = TRUE)
unlink("00_TYPO/mobiTypo/script/phase0/BaseSecteursCommunes_cache", recursive = TRUE)
unlink("00_TYPO/mobiTypo/script/phase0/BaseSecteursCommunes_cache", recursive = TRUE)
# set working directory
setwd("~/git/mobiliscope/ODdata_processing/v4.0/Preprocessing_FrenchCities/")
